generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(uuid())
  type           String           @default("developer")
  email          String           @unique
  name           String?
  password       String
  username       String           @unique
  bio            String?          @db.VarChar(4000)
  role           String?
  seniority      String?
  city           String?
  state          String?
  avatar_url     String?
  cover_url      String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Social         Social[]
  Project        Project[]
  Course         Course[]
  UserTechnology UserTechnology[]
  Job            Job[]
}

model Social {
  id               String   @id @default(uuid())
  userId           String
  linkedin_url     String?
  instagram_url    String?
  github_url       String?
  personal_website String?
  cell_phone       String?
  twitter_url      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Role {
  id        String   @id @default(uuid())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Project {
  id                String              @id @default(uuid())
  userId            String
  githubId          String?
  main_language     String?
  name              String
  description       String
  image_url         String
  repo_url          String
  deployed_url      String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  User              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  ProjectTechnology ProjectTechnology[]
}

model Technology {
  id                String              @id @default(uuid())
  name              String              @unique
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  ProjectTechnology ProjectTechnology[]
  UserTechnology    UserTechnology[]
  JobTechnology     JobTechnology[]
}

model ProjectTechnology {
  id           String     @id @default(uuid())
  projectId    String
  technologyId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  Technology   Technology @relation(fields: [technologyId], references: [id], onDelete: Cascade)
}

model UserTechnology {
  id           String     @id @default(uuid())
  userId       String
  technologyId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  User         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Technology   Technology @relation(fields: [technologyId], references: [id], onDelete: Cascade)
}

model JobTechnology {
  id           String     @id @default(uuid())
  jobId        String
  technologyId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Job          Job        @relation(fields: [jobId], references: [id], onDelete: Cascade)
  Technology   Technology @relation(fields: [technologyId], references: [id], onDelete: Cascade)
}

model Course {
  id          String   @id @default(uuid())
  name        String
  description String
  school      String
  type        String
  progress    Int
  duration    Int
  courseUrl   String
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Job {
  id            String          @id @default(uuid())
  name          String
  description   String
  company       String
  startDate     DateTime
  endDate       DateTime?
  isCurrent     Boolean
  userId        String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  User          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  JobTechnology JobTechnology[]
}

model Feedback {
  id        String   @id @default(uuid())
  name      String
  email     String
  message   String
  phone     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
